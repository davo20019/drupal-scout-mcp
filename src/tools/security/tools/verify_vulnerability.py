"""
Educational security vulnerability verification tool.

Provides detailed, manual testing instructions for developers to verify
security vulnerabilities found by Scout's scanning tools.

INFORMATIONAL ONLY - Does NOT execute exploits automatically.
"""

import logging
from pathlib import Path
from typing import Optional

from src.core.config import ensure_indexed
from server import mcp

logger = logging.getLogger(__name__)


def _find_module_path(module_name: str) -> Optional[Path]:
    """Find module path using code_analysis module's logic."""
    from src.tools.code_analysis import _find_module_path as find_path

    return find_path(module_name)


@mcp.tool()
def verify_vulnerability(
    module_name: str,
    vulnerability_type: str,
    file_path: str,
    line_number: int,
    route_path: Optional[str] = None,
) -> str:
    """
    Explain how to verify a security vulnerability through manual testing.

    INFORMATIONAL TOOL - Does NOT execute exploits automatically.
    Provides detailed explanation of how vulnerabilities could be exploited
    and step-by-step manual testing instructions for developers.

    Designed for AUTHORIZED TESTING of your own Drupal sites only.

    Provides:
    - Detailed explanation of the vulnerability
    - Attack vectors and exploitation methods
    - Manual testing commands (for developer to run)
    - Expected results for vulnerable vs. fixed code
    - Remediation guidance and verification steps
    - Drupal-specific security context

    Args:
        module_name: Module containing vulnerability
        vulnerability_type: xss, sql_injection, command_injection, path_traversal, csrf
        file_path: File containing vulnerability (from scan results)
        line_number: Line number (from scan results)
        route_path: Optional route path for testing

    Returns:
        Detailed vulnerability explanation with manual testing instructions

    Examples:
        verify_vulnerability("ai_chatbot", "xss", "src/Controller/DeepChatApi.php", 45, "/ai-chatbot/deepchat-api")
        verify_vulnerability("my_module", "sql_injection", "src/QueryBuilder.php", 123)

    Use cases:
        - Understand how a vulnerability works
        - Learn manual testing techniques
        - Verify findings before filing bug reports
        - Confirm patch effectiveness after remediation
        - Security training for development teams
    """
    ensure_indexed()

    output = []
    output.append(f"üîç VULNERABILITY VERIFICATION GUIDE: {vulnerability_type.upper()}")
    output.append("=" * 80)
    output.append("")
    output.append("‚ö†Ô∏è  INFORMATIONAL TOOL - Manual Testing Required")
    output.append("This tool provides INFORMATION on how to verify vulnerabilities.")
    output.append("It does NOT automatically execute exploits against your site.")
    output.append("")
    output.append(f"Module: {module_name}")
    output.append(f"File: {file_path}:{line_number}")
    output.append(f"Vulnerability Type: {vulnerability_type}")
    if route_path:
        output.append(f"Route: {route_path}")
    output.append("")
    output.append("‚îÄ" * 80)
    output.append("")

    # Read the vulnerable code for context
    module_dir = _find_module_path(module_name)
    if module_dir:
        try:
            full_file_path = module_dir / file_path.replace(f"{module_name}/", "")
            if full_file_path.exists():
                with open(full_file_path, "r") as f:
                    lines = f.readlines()
                    if 0 < line_number <= len(lines):
                        output.append("## CODE CONTEXT")
                        output.append("")
                        # Show 2 lines before and after
                        start = max(0, line_number - 3)
                        end = min(len(lines), line_number + 2)
                        for i in range(start, end):
                            prefix = "‚Üí" if i == line_number - 1 else " "
                            output.append(f"  {prefix} {i+1:3d}: {lines[i].rstrip()}")
                        output.append("")
                        output.append("‚îÄ" * 80)
                        output.append("")
        except Exception as e:
            logger.debug(f"Could not read code context: {e}")

    # Generate vulnerability-specific information
    if vulnerability_type == "xss":
        output.append("## UNDERSTANDING XSS (Cross-Site Scripting)")
        output.append("")
        output.append("Cross-Site Scripting allows attackers to inject malicious scripts into")
        output.append("web pages viewed by other users.")
        output.append("")
        output.append("**Why This is Dangerous:**")
        output.append("  ‚Ä¢ Session hijacking (steal cookies/tokens)")
        output.append("  ‚Ä¢ Credential theft (capture login forms)")
        output.append("  ‚Ä¢ Malware distribution")
        output.append("  ‚Ä¢ Defacement")
        output.append("  ‚Ä¢ Phishing attacks")
        output.append("")
        output.append("**How XSS Works Here:**")
        output.append("  1. User input is accepted (via form, API, URL parameter)")
        output.append("  2. Input is not properly sanitized/escaped")
        output.append("  3. Input is echoed back to browser")
        output.append("  4. Browser executes injected JavaScript")
        output.append("")
        output.append("‚îÄ" * 80)
        output.append("")
        output.append("## MANUAL TESTING INSTRUCTIONS")
        output.append("")
        output.append("### Test 1: Basic HTML Injection (Safe)")
        output.append("")
        output.append("**Purpose:** Verify HTML is rendered without escaping")
        output.append("")
        output.append("**Test Command:**")
        output.append("```bash")
        if route_path:
            output.append(f"ddev exec curl -X POST http://localhost{route_path} \\")
            output.append('  -H "Content-Type: application/json" \\')
            output.append('  -d \'{"message": "test <b>BOLD</b> test"}\'')
        else:
            output.append("# Navigate to the form/page in your browser")
            output.append("# Enter this in the input field:")
            output.append("test <b>BOLD</b> test")
        output.append("```")
        output.append("")
        output.append("**Expected Results:**")
        output.append("  ‚Ä¢ If VULNERABLE: HTML renders as bold text")
        output.append("  ‚Ä¢ If FIXED: You see literal <b> tags (escaped)")
        output.append("")
        output.append("### Test 2: Script Tag Injection (Safe)")
        output.append("")
        output.append("**Purpose:** Confirm JavaScript can execute")
        output.append("")
        output.append("**Test Command:**")
        output.append("```bash")
        if route_path:
            output.append(f"ddev exec curl -X POST http://localhost{route_path} \\")
            output.append('  -H "Content-Type: application/json" \\')
            output.append('  -d \'{"message": "<script>console.log(\\"XSS_TEST\\")</script>"}\'')
        else:
            output.append("# Enter in browser:")
            output.append('<script>console.log("XSS_TEST")</script>')
        output.append("```")
        output.append("")
        output.append("**Verification Steps:**")
        output.append("  1. Open browser DevTools (F12)")
        output.append("  2. Go to Console tab")
        output.append("  3. Submit the form/trigger the endpoint")
        output.append("  4. Look for 'XSS_TEST' in console")
        output.append("")
        output.append("**Expected Results:**")
        output.append("  ‚Ä¢ If VULNERABLE: Console shows 'XSS_TEST'")
        output.append("  ‚Ä¢ If FIXED: Script tag is escaped, nothing in console")
        output.append("")
        output.append("### Test 3: Alert-Based Verification (Safe)")
        output.append("")
        output.append("**Purpose:** Visual confirmation of XSS")
        output.append("")
        output.append("**Browser Console Command:**")
        output.append("```javascript")
        output.append("// Paste this in browser DevTools console on the page:")
        if route_path:
            output.append(f"fetch('{route_path}', {{")
            output.append("  method: 'POST',")
            output.append("  headers: {'Content-Type': 'application/json'},")
            output.append("  body: JSON.stringify({")
            output.append("    message: '<img src=x onerror=\"alert(document.domain)\">'")
            output.append("  })")
            output.append("}).then(r => r.text()).then(html => {")
            output.append("  document.body.innerHTML += html;")
            output.append("});")
        else:
            output.append("// Enter in form:")
            output.append('<img src=x onerror="alert(document.domain)">')
        output.append("```")
        output.append("")
        output.append("**Expected Results:**")
        output.append("  ‚Ä¢ If VULNERABLE: Alert popup shows your domain")
        output.append("  ‚Ä¢ If FIXED: No alert, tag is escaped")
        output.append("")

    elif vulnerability_type == "sql_injection":
        output.append("## UNDERSTANDING SQL INJECTION")
        output.append("")
        output.append("SQL Injection allows attackers to manipulate database queries,")
        output.append("potentially reading, modifying, or deleting data.")
        output.append("")
        output.append("**Why This is Dangerous:**")
        output.append("  ‚Ä¢ Read sensitive data (passwords, emails, PII)")
        output.append("  ‚Ä¢ Modify/delete database content")
        output.append("  ‚Ä¢ Bypass authentication")
        output.append("  ‚Ä¢ Execute admin operations")
        output.append("  ‚Ä¢ In some cases: OS command execution")
        output.append("")
        output.append("‚îÄ" * 80)
        output.append("")
        output.append("## MANUAL TESTING INSTRUCTIONS")
        output.append("")
        output.append("### Test 1: Error-Based Detection")
        output.append("")
        output.append("**Purpose:** Trigger SQL error to confirm injection point")
        output.append("")
        output.append("**Test Payload:** Single quote (')")
        output.append("```bash")
        if route_path:
            output.append(f"ddev exec curl '{route_path}?id=1'\"")
        else:
            output.append("# Add single quote to any parameter:")
            output.append("# Example: ?id=1' or ?name=test'")
        output.append("```")
        output.append("")
        output.append("**Expected Results:**")
        output.append("  ‚Ä¢ If VULNERABLE: Database error message appears")
        output.append("  ‚Ä¢ If FIXED: Input is escaped, no error")
        output.append("")
        output.append("### Test 2: Boolean-Based Blind SQL Injection")
        output.append("")
        output.append("**Purpose:** Confirm SQL injection via response differences")
        output.append("")
        output.append("**Test Payload (True):**")
        output.append("```bash")
        if route_path:
            output.append("# Test 'always true' condition")
            output.append(f"ddev exec curl '{route_path}?id=1 OR 1=1'")
        else:
            output.append("# Parameter: ?id=1 OR 1=1")
        output.append("```")
        output.append("")
        output.append("**Test Payload (False):**")
        output.append("```bash")
        if route_path:
            output.append("# Test 'always false' condition")
            output.append(f"ddev exec curl '{route_path}?id=1 OR 1=0'")
        else:
            output.append("# Parameter: ?id=1 OR 1=0")
        output.append("```")
        output.append("")
        output.append("**Expected Results:**")
        output.append("  ‚Ä¢ If VULNERABLE: Different responses (true returns more data)")
        output.append("  ‚Ä¢ If FIXED: Identical responses (input is sanitized)")
        output.append("")

    elif vulnerability_type == "command_injection":
        output.append("## UNDERSTANDING COMMAND INJECTION")
        output.append("")
        output.append("Command Injection allows attackers to execute arbitrary system commands")
        output.append("on the server, potentially compromising the entire system.")
        output.append("")
        output.append("**Why This is Dangerous:**")
        output.append("  ‚Ä¢ Full server access")
        output.append("  ‚Ä¢ Read sensitive files (/etc/passwd, database configs)")
        output.append("  ‚Ä¢ Install backdoors/malware")
        output.append("  ‚Ä¢ Lateral movement to other systems")
        output.append("  ‚Ä¢ Data exfiltration")
        output.append("")
        output.append("‚îÄ" * 80)
        output.append("")
        output.append("## MANUAL TESTING INSTRUCTIONS")
        output.append("")
        output.append("### Test 1: Command Chaining (Safe Command)")
        output.append("")
        output.append("**Purpose:** Verify command execution is possible")
        output.append("")
        output.append("**Test Payload:** ; whoami")
        output.append("```bash")
        if route_path:
            output.append(f"ddev exec curl '{route_path}?cmd=test; whoami'")
        else:
            output.append("# Input: test; whoami")
        output.append("```")
        output.append("")
        output.append("**Expected Results:**")
        output.append("  ‚Ä¢ If VULNERABLE: Output shows username (e.g., 'www-data')")
        output.append("  ‚Ä¢ If FIXED: Semicolon is escaped, command doesn't execute")
        output.append("")

    elif vulnerability_type == "path_traversal":
        output.append("## UNDERSTANDING PATH TRAVERSAL")
        output.append("")
        output.append("Path Traversal allows attackers to access files outside the intended")
        output.append("directory, potentially reading sensitive system files.")
        output.append("")
        output.append("**Why This is Dangerous:**")
        output.append("  ‚Ä¢ Read configuration files (settings.php, database.yml)")
        output.append("  ‚Ä¢ Access /etc/passwd, SSH keys")
        output.append("  ‚Ä¢ Read application source code")
        output.append("  ‚Ä¢ Discover system information")
        output.append("")
        output.append("‚îÄ" * 80)
        output.append("")
        output.append("## MANUAL TESTING INSTRUCTIONS")
        output.append("")
        output.append("### Test 1: Directory Traversal")
        output.append("")
        output.append("**Purpose:** Verify files outside webroot can be accessed")
        output.append("")
        output.append("**Test Payload:** ../../../etc/passwd")
        output.append("```bash")
        if route_path:
            output.append(f"ddev exec curl '{route_path}?file=../../../etc/passwd'")
        else:
            output.append("# Input: ../../../etc/passwd")
        output.append("```")
        output.append("")
        output.append("**Expected Results:**")
        output.append("  ‚Ä¢ If VULNERABLE: Contents of /etc/passwd displayed")
        output.append("  ‚Ä¢ If FIXED: Path is validated, access denied")
        output.append("")

    # Remediation section (common to all)
    output.append("‚îÄ" * 80)
    output.append("")
    output.append("## REMEDIATION GUIDANCE")
    output.append("")

    if vulnerability_type == "xss":
        output.append("**Recommended Fix:**")
        output.append("```php")
        output.append("// Use Drupal's escaping utilities")
        output.append("use Drupal\\Component\\Utility\\Html;")
        output.append("")
        output.append("// Escape all output")
        output.append("echo Html::escape($user_input);")
        output.append("")
        output.append("// OR for trusted admin content:")
        output.append("use Drupal\\Component\\Utility\\Xss;")
        output.append("echo Xss::filterAdmin($content);")
        output.append("```")
    elif vulnerability_type == "sql_injection":
        output.append("**Recommended Fix:**")
        output.append("```php")
        output.append("// Use placeholders with Database API")
        output.append(
            "$result = \\Drupal::database()->query('SELECT * FROM {table} WHERE id = :id', ["
        )
        output.append("  ':id' => $user_input,")
        output.append("]);")
        output.append("")
        output.append("// OR with EntityQuery (safe by default)")
        output.append(
            "$entities = \\Drupal::entityTypeManager()->getStorage('node')->loadByProperties(["
        )
        output.append("  'nid' => $user_input,  // Automatically sanitized")
        output.append("]);")
        output.append("```")
    elif vulnerability_type == "command_injection":
        output.append("**Recommended Fix:**")
        output.append("```php")
        output.append("// Avoid shell commands entirely - use PHP functions")
        output.append("// Instead of: exec('ls ' . $dir)")
        output.append("// Use: scandir($dir)")
        output.append("")
        output.append("// If shell commands are absolutely necessary:")
        output.append("$safe_arg = escapeshellarg($user_input);")
        output.append("$safe_cmd = escapeshellcmd($command);")
        output.append("exec($safe_cmd . ' ' . $safe_arg);")
        output.append("```")
    elif vulnerability_type == "path_traversal":
        output.append("**Recommended Fix:**")
        output.append("```php")
        output.append("// Validate and canonicalize paths")
        output.append("$safe_path = realpath($base_dir . '/' . $user_input);")
        output.append("")
        output.append("// Ensure path is within allowed directory")
        output.append("if (strpos($safe_path, $base_dir) !== 0) {")
        output.append("  throw new AccessDeniedHttpException('Invalid path');")
        output.append("}")
        output.append("")
        output.append("// Use Drupal stream wrappers")
        output.append("$file = 'public://' . $filename;  // Restricted to public files")
        output.append("```")

    output.append("")
    output.append(f"**File to Edit:** {file_path}:{line_number}")
    output.append("")
    output.append("‚îÄ" * 80)
    output.append("")
    output.append("## VERIFICATION WORKFLOW")
    output.append("")
    output.append("**Before Fix:**")
    output.append("  1. ‚úÖ Run manual tests above")
    output.append("  2. ‚úÖ Confirm vulnerability exists")
    output.append("  3. ‚úÖ Document findings")
    output.append("")
    output.append("**After Fix:**")
    output.append("  1. ‚úÖ Apply recommended remediation")
    output.append("  2. ‚úÖ Re-run manual tests")
    output.append("  3. ‚úÖ Confirm payloads are blocked/escaped")
    output.append(f"  4. ‚úÖ Run scan_{vulnerability_type}('{module_name}') to verify")
    output.append("  5. ‚úÖ Check server logs for errors")
    output.append("")
    output.append("‚îÄ" * 80)
    output.append("")
    output.append("‚ö†Ô∏è  IMPORTANT LEGAL & ETHICAL NOTES")
    output.append("")
    output.append("‚úÖ AUTHORIZED TESTING:")
    output.append("  ‚Ä¢ YOUR OWN Drupal sites only")
    output.append("  ‚Ä¢ Local development environments (DDEV/Lando)")
    output.append("  ‚Ä¢ With explicit written authorization")
    output.append("  ‚Ä¢ Following responsible disclosure practices")
    output.append("")
    output.append("‚ùå PROHIBITED:")
    output.append("  ‚Ä¢ Testing sites you don't own or operate")
    output.append("  ‚Ä¢ Testing without authorization")
    output.append("  ‚Ä¢ Production systems without change control")
    output.append("  ‚Ä¢ Weaponizing for malicious purposes")
    output.append("")
    output.append("‚öñÔ∏è  Legal Notice:")
    output.append("Unauthorized access to computer systems is illegal under:")
    output.append("  ‚Ä¢ Computer Fraud and Abuse Act (CFAA) - United States")
    output.append("  ‚Ä¢ Computer Misuse Act - United Kingdom")
    output.append("  ‚Ä¢ Similar laws in other jurisdictions")
    output.append("")
    output.append("Penalties include fines and imprisonment.")
    output.append("")
    output.append("‚îÄ" * 80)
    output.append("")
    output.append("üìö ADDITIONAL RESOURCES")
    output.append("")
    output.append("**OWASP Testing Guides:**")
    output.append("  ‚Ä¢ https://owasp.org/www-project-web-security-testing-guide/")
    output.append(f"  ‚Ä¢ https://owasp.org/www-community/attacks/{vulnerability_type}/")
    output.append("")
    output.append("**Drupal Security:**")
    output.append("  ‚Ä¢ https://www.drupal.org/docs/security-in-drupal/writing-secure-code")
    output.append("  ‚Ä¢ https://www.drupal.org/security-team")
    output.append("")
    output.append("**Report Security Issues:**")
    output.append("  ‚Ä¢ https://www.drupal.org/drupal-security-team/report-issue")

    return "\n".join(output)
